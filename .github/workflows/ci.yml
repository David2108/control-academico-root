name:  CI Suite

permissions:
  contents: write

on:
  push:
    branches:
      - master
      - main
      - develop
  pull_request:
    branches:
      - master
      - main
      - develop

env:
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  SPRING_PROFILES_ACTIVE: dev

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}

    services:
      db:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: control_academico
          MYSQL_ROOT_PASSWORD: root
          MYSQL_USER: dev
          MYSQL_PASSWORD: dev
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping -h localhost" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: Checkout codigo
        uses: actions/checkout@v41

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21

      - name: Cache de gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{hashFiles('**/*.gradle*', '**/gradle-wrapper.properties')}}

      - name: Da permisos a gradlew
        run: chmod +x ./gradlew

      - name: Mostrar variables de entorno
        run: env

      - name: Versi贸n de gradle
        run: ./gradlew --version

      - name: Versi贸n de java
        run: java -version

      - name: Variable de entorno JAVA_HOME
        run: printenv JAVA_HOME

      - name: Variable de entorno GRADLE_HOME
        run: printenv GRADLE_HOME

      - name: Comprobar secret TEST_SECRET
        run: |
          if [ -z "${{ secrets.TEST_SECRET }}" ]; then
            echo "No existe el secret TEST_SECRET";
          else
            echo "Existe el secret TEST_SECRET";
          fi

      - name: Build all modules
        run: ./gradlew clean build -x test

      - name: Build academic-core module
        run: ./gradlew :academic-core:build -x test

      - name: Upload versioned artifact
        uses: actions/upload-artifact@v4
        with:
          name: control-academico-${{ github.run_number }}
          path: app/build/libs/*.jar

      - if: github.ref == 'refs/heads/master'
        name: Tag release version
        id: tag_version
        run: |
          VERSION=$(./gradlew -q printVersion | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
          if [ -z "$VERSION" ]; then
            echo "ERROR: No se pudo obtener la versi贸n del proyecto"
            exit 1
          fi
          echo "Tagging release v$VERSION"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag v$VERSION
          git push origin v$VERSION
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - if: startsWith(github.ref, 'refs/heads/develop')
        name: Tag snapshot version
        id: tag_snapshot_version
        run: |
          VERSION=$(./gradlew -q printVersion | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+-[0-9]+-SNAPSHOT' | head -n 1)
          if [ -z "$VERSION" ]; then
            echo "ERROR: No se pudo obtener la versi贸n snapshot"
            exit 1
          fi
          echo "Tagging snapshot v$VERSION"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag v$VERSION
          git push origin v$VERSION
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Wait for MYSQL to be ready
        run: |
          until mysqladmin ping -h 127.0.0.1 -P 3306 --silent; do
            echo "Waiting for MySQL to be ready..."
            sleep 3
          done

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout codigo
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21

      - name: Cache de gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{hashFiles('**/*.gradle*', '**/gradle-wrapper.properties')}}

      - name: Da permisos a gradlew
        run: chmod +x ./gradlew

      - name: Pruebas unitarias
        run: ./gradlew :academic-core:test --stacktrace

      - name: Pruebas de integracion
        run: ./gradlew :app:integrationTest

      - name: Reporte de cobertura (Jacoco)
        run: ./gradlew :academic-core:jacocoTestReport :app:jacocoTestReport

      - name: Get version
        id: version
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/master" ]]; then
            VERSION=$(./gradlew -q printVersion | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
          elif [[ "${GITHUB_REF}" == "refs/heads/develop" ]]; then
            VERSION=$(./gradlew -q printVersion | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+-[0-9]+-SNAPSHOT' | head -n 1)
          else
            VERSION=""
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - if: github.ref == 'refs/heads/master'
        name: Publish to Github Relases
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build.outputs.VERSION }}
          name: Release v${{ needs.build.outputs.VERSION }}
          files: app/build/libs/*.jar
          generate_release_notes: true
          fail_on_unmatched_files: false